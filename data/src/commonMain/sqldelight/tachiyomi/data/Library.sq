CREATE VIEW IF NOT EXISTS library AS
SELECT id, sourceId, key, title, status, cover, lastUpdate FROM manga WHERE favorite = 1;

findFavoriteSourceIds:
SELECT sourceId FROM library GROUP BY sourceId ORDER BY COUNT(sourceId) DESC;

findAll:
SELECT library.id, library.sourceId, library.key, library.title, library.status, library.cover,
  library.lastUpdate, COUNT(chapter.id) AS unread
FROM library
LEFT JOIN chapter ON library.id = chapter.mangaId AND chapter.read = 0
GROUP BY library.id
ORDER BY
CASE
  WHEN :sort = 'title' THEN title
  WHEN :sort = 'lastRead' THEN title -- TODO
  WHEN :sort = 'lastUpdated' THEN lastUpdate
  WHEN :sort = 'unread' THEN unread
  WHEN :sort = 'source' THEN sourceId
END,
CASE
  WHEN :sort = 'titleDesc' THEN title
  WHEN :sort = 'lastReadDesc' THEN title -- TODO
  WHEN :sort = 'lastUpdatedDesc' THEN lastUpdate
  WHEN :sort = 'unreadDesc' THEN unread
  WHEN :sort = 'sourceDesc' THEN sourceId
END DESC,
CASE
  WHEN :sort = 'source' THEN title
  WHEN :sort = 'sourceDesc' THEN title
END;

findAllWithTotalChapters:
SELECT library.id, library.sourceId, library.key, library.title, library.status, library.cover,
  library.lastUpdate, COUNT(chapter.id) AS total,
  SUM(CASE WHEN chapter.read == 0 THEN 1 ELSE 0 END) AS unread
FROM library
LEFT JOIN chapter ON library.id = chapter.mangaId
GROUP BY library.id
ORDER BY total;

findUncategorized:
SELECT library.id, library.sourceId, library.key, library.title, library.status, library.cover,
  library.lastUpdate, COUNT(chapter.id) AS unread
FROM library
LEFT JOIN chapter ON library.id = chapter.mangaId AND chapter.read = 0
WHERE NOT EXISTS
  (SELECT mangacategory.mangaId FROM mangacategory WHERE library.id = mangacategory.mangaId)
GROUP BY library.id
ORDER BY
CASE
  WHEN :sort = 'title' THEN title
  WHEN :sort = 'lastRead' THEN title -- TODO
  WHEN :sort = 'lastUpdated' THEN lastUpdate
  WHEN :sort = 'unread' THEN unread
  WHEN :sort = 'source' THEN sourceId
END,
CASE
  WHEN :sort = 'titleDesc' THEN title
  WHEN :sort = 'lastReadDesc' THEN title -- TODO
  WHEN :sort = 'lastUpdatedDesc' THEN lastUpdate
  WHEN :sort = 'unreadDesc' THEN unread
  WHEN :sort = 'sourceDesc' THEN sourceId
END DESC,
CASE
  WHEN :sort = 'source' THEN title
  WHEN :sort = 'sourceDesc' THEN title
END;

findUncategorizedWithTotalChapters:
SELECT library.id, library.sourceId, library.key, library.title, library.status, library.cover,
  library.lastUpdate, COUNT(chapter.id) AS total,
  SUM(CASE WHEN chapter.read == 0 THEN 1 ELSE 0 END) AS unread
FROM library
LEFT JOIN chapter ON library.id = chapter.mangaId
WHERE NOT EXISTS
  (SELECT mangacategory.mangaId FROM mangacategory WHERE library.id = mangacategory.mangaId)
GROUP BY library.id
ORDER BY total;

findAllInCategory:
SELECT library.id, library.sourceId, library.key, library.title, library.status, library.cover,
  library.lastUpdate, COUNT(chapter.id) AS unread
FROM mangacategory
INNER JOIN library ON mangacategory.mangaId = library.id
LEFT JOIN chapter ON library.id = chapter.mangaId AND chapter.read = 0
WHERE mangacategory.categoryId = ?
GROUP BY library.id
ORDER BY
CASE
  WHEN :sort = 'title' THEN title
  WHEN :sort = 'lastRead' THEN title -- TODO
  WHEN :sort = 'lastUpdated' THEN lastUpdate
  WHEN :sort = 'unread' THEN unread
  WHEN :sort = 'source' THEN sourceId
END,
CASE
  WHEN :sort = 'titleDesc' THEN title
  WHEN :sort = 'lastReadDesc' THEN title -- TODO
  WHEN :sort = 'lastUpdatedDesc' THEN lastUpdate
  WHEN :sort = 'unreadDesc' THEN unread
  WHEN :sort = 'sourceDesc' THEN sourceId
END DESC,
CASE
  WHEN :sort = 'source' THEN title
  WHEN :sort = 'sourceDesc' THEN title
END;

findAllInCategoryWithTotalChapters:
SELECT library.id, library.sourceId, library.key, library.title, library.status, library.cover,
  library.lastUpdate, COUNT(chapter.id) AS total,
  SUM(CASE WHEN chapter.read == 0 THEN 1 ELSE 0 END) AS unread
FROM mangacategory
INNER JOIN library ON mangacategory.mangaId = library.id
LEFT JOIN chapter ON library.id = chapter.mangaId
WHERE mangacategory.categoryId = ?
GROUP BY library.id
ORDER BY total;
